package study163;

/*
	位运算
*/


public class BitOperatorDemo1
{
	public static void main(String[] args)
	{
		
		/*
			3的二进制: 00000011
			5的二进制: 00000101
			
				00000011
		&	    00000101
		------------------------------
				00000001
				
				00000011
		|	    00000101
		------------------------------
				00000111	
				
				
				
		*/
		System.out.println(3 & 5);
		System.out.println(3 | 5);
		System.out.println(3 ^ 5);
		
		System.out.println(~5);
		
		System.out.println("===========================");
		
		//移位操作
		/*
			左移使用"0"补充,
			右移使用"符号位"补充:
				若是正数使用"0"补充
				若是负数使用"1"补充(操作:先取反,再求补)
			
			2的二进制
			00000000_00000000_00000000_00000010
			左移三位:
			00000000_00000000_00000000_00010000 // 16
			右移三位
			
		*/

		System.out.println(2 << 3);
		
		
		/*
			原码:1000_00000000_00000000_00000010000
			反码:1111_11111111_11111111_11111101111
			补码:1111_11111111_11111111_11111110000
			右移三位
			1111111_11111111_11111111_11111110(-2的补码)
		*/
		System.out.println(-16 >> 3);
		
		
		System.out.println(-16 >>> 3);
	}
}